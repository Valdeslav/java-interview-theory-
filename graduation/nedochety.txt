J13	ORM (на примере Hibernate или Spring Data)
Немного освежить работу с транзакции и методом flush()
Разобраться лучше с односторонними и двусторонними связями.
Изучить типы коллекций в Hibernate. Почитать в каких случаях ленивая инициализация завершается ошибкой.
изучить тип коллекции Bag. Разобраться с уровнями иерархии: DataSource, SessionFactory, Session, Entity
Разобраться лучше когда использовать одностороннюю, а когда двустороннюю связь, разобраться лучше зачем нужен Datasource.
Разобраться лучше с DataSource, разобраться со стратегиями маппинга наследования.
Разобраться с: что есть DataSource, Жизненный цикл сущностей, наследование и ORM, работа с идентификаторами
не ответил зачем нужны flush, evict; что такое join fetch, но в целом все хорошо
не смог ответить как hibername улучшает/ухудшает производительность, слабо по проблеме select n+1, в целом путался и волновался, но в целом правильно
Разобраться лучше со способами устранения проблемы n+1.
Разобраться, когда по умолчанию используется EAGER, а когда LAZY, для ассоциаций между entity-классами.
Разобраться лучше с DataSource.
Разобраться с использованием связи 1-To-1.
Разобраться лучше с необходимостью применения @OneToOne.
Разобраться в стратегиях генерации PK. Разобраться какие поля используются для организации связей помимо PK-FK. Разобраться в разнице 1-To-1 и Many-To-1. Лучше разобраться с Many-To-Many. Разобраться с Fetch strategy по умолчанию. Разобраться в преимуществах и недостатках использования XML и аннотаций.
Разобраться со всеми стратегиями генерации первичных ключей, в чем разница между @ManyToOne и @OneToOne ,разобраться в каком случае нужно создавать обязательную сущность для связующей таблицы many-to-many, когда по умолчанию используется lazy, а когда eager, плюс и минусы использования аннотация и XML для маппинга.
Местами понадобились наводящие вопросы (например, при описании проблемы получения lazy связанных сущностей вне сессии).
Разобраться лучше для чего нужен DataSource (какие преимущества даёт), разобраться когда по умолчанию испольузется lazy, а когда eager и границы, в которых можно инициализировать lazy-property, разобраться зачем нужна @OneToOne и как конфигурировать @ManyToMany ,какие плюсы и минусы использования аннотаций и XML для маппинга.
Слабо понимает сильные и слабые стороны использования JPA. Разобраться с назначением DataSource. Лучше разобраться с инициализацией Entity. Лучше разобраться с many-to-many. Преимущества и недостатки использования аннотаций и xml
Рекомендуется почитать про аннотацию @Embedded. Местами нужны были наводящие вопросы, но значимых пробелов в знаниях не выявлено .
Один балл снимаю за то что не назвал назначение аннотации @Embedded
Нет понимания, что зачем хибер "следит" за сущностью и откладывает запросы в бд. Сказал, что update является обязательным и без него изменения не попадут в БД.
Не смог объяснить, почему Entity-класс должен быть final. В остальном - тема раскрыта в полной мере.
Разобраться почему entity-класс не может быть final.
Разобраться как создавать Criteria и выполнять запросы через Criteria API
Не знает о Serializable для Entity. Некоторые недочеты по остальным подвопросам.
Несколько сбивчивое, хоть и по итогу правильное объяснение. Небольшая путаница с названиями аннотаций и их параметров.
Местами потребовались наводящие вопросы. Пробелы в понимании различий между каскадным удалением с помощью Cascade и OrphanRemoval.
Возникли сложности с отличиям CascadeType.REMOVE и orphanRemoval. Не справился сразу с вопросом про обязательность метода merge(), чтобы сохранить изменения в БД, но затем после наводящих вопросов справился, поэтому вопрос засчитан. Не смог ответить, как можно перевести ентити в detached кроме явного вызова detach().




J16	Логирование
Разобраться в чём преимущества использования фреймворков, по сравнению с ручным написанием
Разобраться почему используются log - frameworks вместо System.out.println, для чего нужны выделены различные уровни логирования. Рекомендуется посмотреть приложения Log Analyzers
немного напутала, как работает иерархия логгеров для типа String, а не классов, не справилась с isLogDebugEnabled, но в целом все ок
Разобраться, что такое "имя" логгера, а также каким должен быть формат строки для имени и как это имя учитывается в конфигурировании.
Разобраться со способами как можно делать ленивый расчет аргументов строки сообщения лога, если данный уровень логгирования отключен.
Познакомится со сравнительной характеристикой разных библиотек и уметь рассказать о +/- той или иной
неправильно рассказал о иерархии логгеров, но в целом ок
Разобраться в отличиях создания логгера просто по строке и по имени класса: каким должен быть формат строки для имени и как это имя учитывается в конфигурировании.
Разобраться со способами как можно делать ленивый расчет аргументов строки сообщения лога, если данный уровень логгирования отключен.
Разобраться с преимуществами использования библиотеки SLF4J в качестве фасада для логирования. Разобраться в чем будет разница создания логгера по классу или просто по строке.
Logback layout.
Разобраться что такое Encoder, Layout в Logback.
Посмотреть, как можно "прятать" трудоемкий расчет параметров для сообщения лога, если текущий уровень логирования может быть отключен
Разобраться лучше зачем нужны Encoders и Filters в Logback.
Разобраться лучше какие преимущества дают системы логирования.
Разобраться с производительностью логирования. Логирование в многопоточных приложениях.
Почитать про булевские методы для проверки уровня логирования.
Посмотреть, как включать или выключать логгирование на уровне некоторых пакетов/классов. Также разобраться с использование LoggerFactory и какие есть способы получения объекта Logger. Посмотреть как делать "ленивое" логирование, учитывая что данный уровень логгирования может быть отключен.
Разобраться с Filters.
Пробел в знаниях по фильтрам. В остальном - хорошо.
Пробел в знаниях по фильтрам. В остальном - хороший уровень, обсудили потенциальные проблемы некорректного логгирования (интенсивные операции с диском, логгирование критических данных, расходование дискового пространства)
Разобраться с Filter в log4j.
Точно не понимает необходимость использования логеров в т.ч. в многопоточных приложениях.
Разобраться с причинами настройки разных уровней дебага и в каких случаях отладка приложения без логера невозможна.
Лучше разобраться с наследованием логирования. Разобраться с аспектами производительности приложения при логировании.
Подумать над всеми преимущeствами, которые даёт использование логеров.
Разобраться лучше с разницей RUN, CMD, ENTRYPOINT.




J21	Docker
Разобраться с entry-point и volume
Разобраться с командами ENTRYPOINT и VOLUME, зачем нужны volume'ы.
напутал по мелочам, не справился как посмотреть файловую систему в контейнере, но в целом, не справился как достучаться из одного сервиса docker-compose к другому
В целом ок, но нет понимания чем docker отличается оn VM и какие преимущества дает.
не рассказал про тома, запутался как посмотреть содержимое файла в контейнере, но в целом ок
Изучить стратегии обновлений при помощи оркестраторов. Все же повторить еще раз выставление доступных портов в контейнере. Запуск ключевого процесса при помощи RUN vs CMD vs ENTRYPOINT. Углубиться в перечень параметров команды run и build.
Лучше разобраться с назначением оркестраторов
Отличная теоретическая подготовка, хорошее знание команд и их параметров. Из замечаний: следует поизучать плюсы и минусы механизма контенеризации и оркестрирования.
нет понимания чем отличается docker от vm и как docker работает "изнутри"
Разобраться с конфигурированием портов, разобраться с аспектами общего использования докер-образов
Разобраться лучше как устроено сетевое взаимодействие в docker, разобраться лучше с mount и volume.
Разобраться с использованием "стандартной сборки" контейнера. Разобраться с авторизацией и аутентификацией при помощи оркестратора




J24	Spring Core
Посмотреть способы создания бинов. Какой скоуп когда использовать( singleton vs prototype
Разобраться с преимуществами/недостатками/способами и необходимостью применения бинов с различными scope
Почитать про POJO, Bean. Концепция Bean в Java
Разобраться с java bean - спросить на следующем собеседовании! Разобраться с преимуществами injection перед new
на практике посмотреть как работает scope prototype
Изучить использование аннотации @Profile.
Посмотреть использование аннотации @Value не только над полем.
Посмотреть реализации ApplicationContext
Разобраться с аннотацией @Profile и ее использованием (без учета управления профилями от Spring Boot).
изучить @Order, @Primary. Поэкспериментировать с негативными сценариями, конфликтом бинов.
Разобраться с конфигурациями.
Неправильно рассказал как работает инжект в случае с аннотацией @Bean, но в целом все ок
Разобраться с разницей аннотаций Inject и Autowired.
Общее понимание есть. Немного путался в жизненном цикле. Так же есть непонимание в конфигурации приложения, когда используются аннотации (перекомпилировать - это не вариант). Стоит более глубоко пройтись по отличию в различных способах созданию бинов и типах аннотаций
Посмотреть в живую на создаваемые бины со скоупом prototype.
Изучить использование профилей в Spring Framework. Конфигурирование и аннотация @Profile.
Разобраться с внедрением зависимости в конструктор, если бин объявляется через @Bean-метод в конфигурационном классе.
небольшие затруднения с профилями, инжектом коллекций и отличием аннотаций @Component, @Service и др, но в целом не критичные.
    Bean и его атрибуты: изучать, ответ не полный
    Схема создания бинов BeanPostProcessor, BeanFactory, BeanFactoryPostProcessor: немного запуталась в очередности: init VS afterPropertiesSet, в остальном без замечаний
    Bean Scopes: перечислила, но понимания нет
    IoC, DI, @Autowired: не назвала атрибут аннотации Autowired, не знакома с аннотацией Inject, в остальном без замечаний.
    @Component, @Service, И другие: изучать, ответ не полный. Расскрыта только аннотация Repository
    ApplicationContext: описано базовое назначение
    Конфигурация: ответ полный.
Разобраться с @Repository, чем отличается WebContext от ApplicationContext, разобраться с потокобезопасностью singleton Чуть дальше от заученного - ответы прекращаются
Разобраться с потоко-небезопасностью Singleton.
Не смог объяснить зачем же спринг нужен, что он дает; напутал с разницей между @Service, @Controller, но в целом ок
Разобраться с аннотацией Profile.
Разобраться с отличиями @Component, @Service, @Repository, @Controller, разобраться какие дополнительные возможности предоставляет ApplicationContext по сравнению с BeanFactory
Нужно познакомиться с особенностями аннотации @Repository. Проблемы при сравнении возможностей ApplicationContext и BeanFactory. В остальном - хорошо, смог придумать решения для заданных практических примеров.
Разобраться как работает скоуп prototype, что ApplicationContext делает дополнительно в сравнении с BeanFactory, почитать про аннотации @Primary и @Profile.
Почитать а разнице между BeanFactory и ApplicationContext. Поглубже разобраться с жизненным циклом бинов, а также как добавлять код для каждого этапа. Аннотации @Component, @Service и т.п. - хорошо. Конфигурация через @Configuration и определения через @Bean - хорошо. Почитать о техниках разрешения конфликтов, при наличии нескольких бинов для одного типа. Посмотреть аннотацию @Profile и в целом настройки профилей.
Разобраться подробнее с алгоритмами. по которым работает @Autowired
Разобраться по каким данным происходит поиск бина.
Почитать об использовании и внедрении ApplicationContext/BeanFactory,
Также посмотреть о создании своих FactoryBean
С теорией проблем нет. Без слоностей смог диагностировать со слов описанную проблему с инжектом необходимой зависимости. Однако возникли сложности с обьяснением как программно добраться до контекста приложения и до необходимого бина. Не смог обьяснить разницу между аннотациями Autowired и Inject.
Пробелы в понимании недостатков внедрения бинов через поля
Подробно и уверенно отвечал на все задаваемые вопросы. Из нюансов: не смог назвать отрицательную составляющую использования Spring Framework





J25	Spring и DB
разобраться : как выполнить запрос select count(*) при помощи jdbcTemplate Spring Transaction: разобраться с параметром "менеджер транзакций"
Как работать с хранимыми процедурами?
не справилась как получить ответ от запроса select count(*) из jdbcTemplate, но по остальному ок
Spring JDBC: доразбираться в особенностях использования RowMapper, RowCallbackHandler и ResultSetExtractor
Spring JDBC - разобраться в разнице использования методов "query" и "update". Разобраться в интерфейсах RowMapper, RowCallbackHandler и ResultSetExtractor и в каких ситуациях используется каждый из них. Transaction - изучить как программно(вручную) использовать транзации, когда недоступно использовании аннотации @Transactional, так как отсутсвует контейнер и контекст от Spring
Разобраться с программным способом управления транзакциями в Spring.
Разобраться лучше с использованием RowMapper, разобраться как Spring обрабатывает аннотацию Transactional.
Разобраться что такое DataSource, как конфигурировать JdbcTemplate, какие аттрибуты у аннотации Transactional.
Разобраться когда происходит откат транзакции при @Transactional без атрибутов, разобраться как происходит обработка аннотации @Transactional (с помощью прокси).
Разобраться с propagation и с коммитом/откатом транзакций при исключениях в транзакциях.
Разобраться с JDBC template, Spring Transaction Propagation, commit/rollback, Режимы начальной загрузки репозитория
Разобраться с вложенными @Transactional. Разобраться с XA (eXtended Architecture)
Разобраться как Spring обрабатывает аннотацию @Transactional с помощью какого механизма, почитать дополнительно про XA-транзакции.
Освежить знания по исключениям, выбрасываемым методами JdbcTemplate и его потокобезопасности.
Ответ достаточно полный, единственный нюанс: мало методов класса JdbcTemplate было названо. В названных не была озвучена полная сигнатура, включая список выбрасываемых исключений.
Разобраться лучше в каких случаях транзакции откатываются по умолчанию, а в каких нет.
Изучить тему DataSource и его готовые реализации для различных типов работы с СУБД (Transaction Aware, Connection Pool и т.п.)
Разобраться с программным управлением транзакциями подробнее, разобраться при каких эксепшенах происходит откат транзакции по умолчанию.
Пробел в знаниях по ручному управлению транзакциями, небольшой пробел - по откату транзакций при возникновении не Runtime исключений в @Transactional-методах. Возникла небольшая проблема с практическим примером, в котором один @Transactional-метод с REQUIRES_NEW вызывается внутри другого с REQUIRES_NEW. Но в конце Денис смог объяснить специфику работы такого кода. В остальном - хорошо.
не знал, что propagation по-умолчанию не работает между методами одного класса (прямой вызов без прокси)
Возникла проблема с пониманием работы аннотации @Transactional при вызове методов класса внутри других методов того же класса. В остальном - продемонстрированы хорошие знания.
Разобраться с тем как обрабатывается соединение. Немного больше почитать про JDBCTemplate
Лучше разобраться с Batch Operations
Нужно дополнительно разобраться еще как в Spring JDBC происходит выполнение пачки запросов.



J26	Spring Web
Посмотреть подробнее разницу между HasAuthority, HasRole
Обратить внимание при изучении вопроса о безопасности и защите приложений на суть опасности кросс-доменных запросов.
+Почитать про HandlerExceptionResolver, ограничения PathVariable, QueryParam, RequestParam
разобраться с HandlerExceptionResolver, разобраться с допустимыми значениями path-параметров
не справился с валидацией @Valid, слабо с обработкой исключений
Знания слишком поверхностные. Почти ничего не подкрепрено практикой по использованию той или иной "фичи".
    Доразбираться с возможностями маппинга при использования @RequestMapping.
    Рассмотреть все возможные типы, указываемые как аргументы метода контроллера, а также возможные типы для возвращаемого значения.
    Разобраться с использованием RequestBody и ResponseBody.
    Разобраться с валидацией принимаемой модели: использование @Valid, а также BindingResult; добавление собственной реализации Validator; добавление своих привязок через @InitBinder.
    Разобраться с мехнизмом Interceptors и использованием на практике.
слабо с классическим Spring MVC, изучал применительно к REST, но в целом ок
Некоторые вещи приходилось явно вытаскивать. Не достаточно детально был описан путь запроса по Spring MVC. Разобраться с фильтрами и возвратом различных статус кодов. Разобраться как проходит сериализация и десериализация.
почитать про requestbody/responsebody, получилось напутано про валидацию форм, но в целом тоже ок
Изучить получение в методе контроллера данных из тела запроса в зависимости от Content-Type самого запроса.
Поразбираться с практическим применением валидации: @Valid, BindingResult и @InitBinder.
Поразбираться в преднзначении и использовании каждого из интерфейсов: Model, ModelMap, ModelAndView, View.
Разобраться с возможностями ControllerAdvice, разобраться с поддержкой upload файлов в Spring MVC, разобраться лучше с работой с сессией в Spring MVC.
Разобраться с перенаправлением данных в модель. Разобраться с PathParams
очень неструктурированные ответы, трудно понять что имеется в виду, но в целом правильно
Разобраться с upload файлов и с обработкой ошибок в Spring MVC.
Разобраться лучше с механизмом работы с моделью в Spring MVC, разобраться с аннотацией @ExceptionHandler.
Разобраться как реализуется и используется модель в Spring MVC
Почитать подробнее про обработку ошибок в Spring MVC и про upload файлов.
#todo повторить Multipart https://spring.io/guides/gs/uploading-files/
Разобраться с ViewResolvers, Handlers
Разобраться какие есть встроенные ViewResolver'ы в Spring MVC.
Почитать про @ResponseBody, использование @PathVariable, @ModelAttribute
Не описал назначение @ResponseBody. Не в полной мере пояснил назначение @ModelAttribute. Не назвал аннотаций по работе с кукиз. Однако без проблем в текстовом редакторе создал пример контроллера.
Пробел в знаниях по включению interceptors в цепочку обработки запросов. Размытое понимание аннотации @RequestBody, пришлось наводящими вопросами выводить на правильную версию.
Разобраться как конфигурировать Interceptors, разобраться с file upload в Spring
Разобраться лучше как мапить данные запроса на параметры контроллера, как работает аннотация @Valid.
Хорошо понимает принцип работы Spring MVC и построение приложение над ним. Но очень слабо с самой реализацией приложений, когда необходимо работать с самими данные, которые ходят в запросах/ответах. Необходимо разобраться с механизмами передачи и получения данных в методе контроллера (аннотации @RequestParam, @PathVariable, @RequestBody и др), а также типы Model, ModelMap, ModelAndView, аннотация @ModelAttribute и т.п. Посмотреть механизмы привязки данных в объекты с валидацией - @Valid, BindingResult, Validator, @InitBinder. Изучить аннотации @RequestBody и @ResponseBody и их работу с HttpMessageConverter.
Разобраться лучше с назначением HandlerMapping, DispatcherServlet, ViewResolver и их взаимодействием
Подробнее почитать про то как обрабатывается реквест в Spring MVC, т.е. через какую цепочку вызовов проходит.
Пробелы в знаниях по Interceptors.
Пробелы:
    Регулярные выражения в шаблонах URL
    Особенности forward и redirect
Замечаний нет. В аннотациях и работе Spring MVC ориентируется, Описал пример Rest контроллера.




J27	Безопасность приложения, Авторизация и Аутентификация (опционально, один из)
Посмотреть за счет чего достигается безопасность при шифровании паролей. PermissionEvaluator.
Почитать про oauth, oauth2.
На будущее: стоит изучить работу с OAuth2.0, как его использовать в проектах, какие у него есть "Grand Types" и в каких ситуациах каждый из них используется
Разобраться чуть лучше с преимуществами использования oauth/oauth2.0
Разобраться чем чем и как гарантируется лучшая надежность и защищенность при использовании oauth2
Разобраться с использованием аннотаций для ограничения ролей, разобраться с oauth и oauth 2.0 и их использованием в Spring Security.
Разобраться с аннотация @RolesAllowed, функцией "remember-me", oauth/oauth2
Хороший уровень. Рекомендуется подробнее почитать про хеширование паролей, особенности необратимого шифрования.
Ответы более чем полные. Так же рассказал о двухфакторной аутентификации и кластерном решении. Один балл снимаю за то что не в полной мере расскрыл смысл хеширования паролей.
Разобраться с двухфакторной аутентификацией, лучше почитать про простые способы задания ролей и пользователей.
Почитать про простые пути установки пользователей/ролей дял приложения, почитать про двухфакторную аутентификацию.



W8	JavaScript framework
Cинтаксис и приемы работы с JSX: использование кода JS в разметке JSX, привязка к данным, условный рендеринг, рендеринг с итерированием, приемы как передавать параметры в обработчики событий. Хуки и состояние компонента, как реакт узнает об изменении данных. Приемы работы с управляемыми и неуправляемыми формами.
Изучить синтаксис JSX: кем и как обрабатывается, во что превращается и, как следствие, какие правила на используемые JS-конструкции внутри размертки.
Разобраться с работой функции setState: правильное использование с функцией-колбэком. А также как React определеяет изменение значения "стейта".
Рассмотреть работу с управляемыми и неуправляемыми компонентами.
Обратить внимание на особенность функции setState из useState, изучить способы реализации управляемых и неуправляемых компонентов (один компонент может иметь обе реализации одновременно), посмотреть 3-й способ создания рефы и его назначение, убедиться в отсутствии warnings при описании списка без функции map
Способы обновления состояния. Сайд эффекты в дикой природе.
Разобраться с порядком вывода в разметку различных типов данных. Также изучить сигнатуру setState для функциональных и классовых компонентов, способы создания ref-ов, а также особенности их проброса дочерним компонентам


Нет знаний по useCallback, useMemo, useRef.
React. Пример функционального и компонента-класса OK. Пропсы и стейт - о них так часто говорят, что об этом надо иметь представление. И пробелы с синтаксисом JSX. Считаю, базовые конструкции - как сделать повторитель в шаблоне jsx, например - надо уметь.
Требуется дополнительное изучение документации:
обратить особое внимание на
    сигнатуры методов createElement, setState,
    выходные параметры метода render (что можно писать, что нельзя),
    условные рендеринг в jsx, указание свойств с разными типами значений,
    getDerivedStateFromProps - назначение,
    особенности PureComponent (поверхностное сравнение),
    defaultProps - способы задания,
    котролируемые/некотролируемые компоненты,
    работу с асинхронными функциями + побочные эффекты
Не до конца разобрался с синтаксисом JSX (условный ренденринг и рендеринг списков). Трудности с передачей пропсов и чтением их значений в компоненте. Большие трудности в практическом примере на использования событий input, хранение состояние в state и перерисовка при изменении введенного значения.
Рекомендуется посмотреть сигнатуру setState, способы установки свойств по умолчанию.
Подучить синтаксис JSX(условный рендеринг). Получше разобраться с правильным использованием пропа "key" для рендера списков. А также разница в использовании "управляемых" и "неуправляемых" компонентов для работы с формами.
Для непрофильного JS вполне нормально, но можно дополнительно разобраться с использованием анонимных функций в render
Хорошо. Можно посмотреть getDeriveStatedFromProps и shouldComponentUpdate в Component и PureComponent
Посмотреть PureComponent, getDerivedStateFromProps и варианы вызова setState. Была путаница с shouldComponentUpdate
Без нареканий. Для себя посмотреть PureComponent и setState с двумя аргументами
Вопрос с прошлого раза подтянул. Можно подробнее посмотреть getDerivedStateFromProps и расширенные возможности propTypes
Проблемы с setState, проблемы с методами жизненного цикла, не заметил потерю контекста, хотя знает некоторые способы решения проблемы. ref -, propTypes -
Неуверенный ответ по отличиям JSX от HTML
Понадобились наводящие вопросы при решении практического примера с выводом массива: передача значения в prop, вывод значения в разметке. Пробелы в понимании асинхронности setState, обязательно нужно разобраться с этим вопросом!
нет практики по prop-type(но есть понимание), вывод массива с небольшой подсказкой, заминка синтаксисом вывода значений и с асинхронностью setState по остальному всё отвечено
Хорошо, но похоже, что очень мало практического опыта работы с React. Посмотреть использовать propTypes. Разобраться с разницей Component и PureComponent
глянуть виртуальный дом, PropTypes, getDerivedStateFromProps, в целом то что рассказывал ок, есть точечные пробелы в знаниях опечатки в синтаксисе но при наличии хорошего понимания как должно работать
Пробел в знаниях по методу getDerivedStateFromProps; controlled/uncontrolled компонентам
Кандидат уяснил базовые сведения, особенности работы с jsx, рассказал о жизненном цикле компонента, объяснил различие свойств и состояния, в общем получил представления о reference. Вместе с тем необходимо обратить внимание на controlled/uncontrolled элементы формы, а также возможность установки свойств по умолчанию.




T6	Безопасность и методы защиты приложений
+ Разобраться лучше с XSS.
+ Доразбираться как же возникает XSS-атака и почему браузер начинает интепретировать какие-то данные, как JavaScript-код.
+ SQL инъекции: посмотреть параметризированные запросы и механизм их использования.
+ Разобраться лучше как появляется SQL-инъекция, разобраться лучше с XSS.
+ Знания только теоретические и слишком поверхностно без понимания, что вообще происходит в системе при атаке и как эти уязвимости предотвращать.
+ SQL Injection - разобраться как возникает: что должно быть на входе и как должен формировать SQL-запрос, а также разобраться со способа устранения этой уязвимости.
+ XSS - Разобраться как и когда работает выполнение скриптов, почему бразуер интерпретирует скрипт, который пришел, например, как GET-параметр в адресной строке. Также разобраться со способами борьбы с такими атаками.
+ Расширить знания по Injection. XSS как работает на практике.
+ XSS: разобраться, когда и как начинает работать в браузере скрипт, введенный пользователем в текстовом поле.
+ немного запутался с практическим примером, но в целом все хорошо
+ "Недостатки контроля доступа (Broken Access Control)" , "Недостатки журналирования и мониторинга (Insufficient Logging & Monitoring)" - лучше разобраться с методами защиты от данной уязвимости.
+ Разобраться лучше со способами устранения недостаков контроля доступа, разобраться лучше с недостатками журналирования и мониторинга.
+ Более глубоко разобраться с "Недостатки журналирования и мониторинга" и инструментами для решения проблемы "Использование компонентов с известными уязвимостями"
+ почитать про XSS.
+ Более детально исследовать тему безопасности в аспектах аутентификации и авторизации. Так же детальнее разобраться в Cross-Site Scripting (XSS). Так же больше узнать по теме обеспечения песопасности на уровне транспортировки.
+ SQL Injection: посмотреть параметризированные запросы. XSS: разобраться как именно появляется уязвимость(на какой стороне и в какой момент выполняется код) и какой код является уязвимым; посмотреть хранимые и отраженные XSS-атаки. Также посмотреть способы защиты от этих атак. Внешие сущности XML: так и не разбирал с прошлого раза откуда приходит атака и где устанавливается "зловредный код".
+ Разобраться подробнее со всеми способами борьбы с SQL-инъекциями.
+ Слишком поверхностно и без понимания, что вообще происходит в системе при атаке и как эти уязвимости предотвращать.
+ SQL Injection - разобраться со способа устранения возможности внедрения.
XSS - Разобраться как и когда работает выполнение скриптов, а также со способами борьбы с такими атаками.
Изучить, что же такое "Внешние сущности XML", а также где находится тот код, который может выполниться
Разобраться с отраженными XSS-атаками. Как именно они возникают на клиенте и механизмы защиты от них. Остальное хорошо.
По началу путалась с инъекцией и XSS. SQL-инъекции подтянула с прошлого раза, с XSS все еще нет понимания. Есть пробелы по десериализации
Разобраться с практической реализацией SQL -инъекций. Лучше разобраться XSS. Разобраться с подменой идентификаторов. Разобраться с сериализацией /десериализацией объектов и их проблемами.
Проблемы с практической реализацией и примерами по инъекциям, insecure object reference, сериализацией/десериализацией.
По всем пунктам повторяла одни и те же решения: валидация входных данных и использование готовых специализированных библиотек. При этом очень туго объяснялись причины того или иного вида уязвимости и какие пути решения этих проблем. Писать код без понимания, где здесь возникает проблема - здесь даже использование библиотек никак не поможет.
SQL-инъекции - разобраться с параметризированными запросами. XSS - получше посмотреть способы защиты. Broken Authentication - очень слабо по защите от компрометирования сессий и токенов доступа.
Разобраться с кодированием идентификаторов.
Пробелы в понимании фильтрации пользовательских данных для противодействия XSS. Немного неуверенные ответы по остальным пунктам.
Не смог привести пример SQL-инъекции вида "1 and 1=1". Рекомендуется почитать про LDAP и другие решения для авторизации и аутентификации. Пробел в знаниях по обеспечению работы кросс-доменных запросов.
Незначительные пробелы в понимании сценариев экранирования и фильтрации значений для предотвращения XSS. В остальном - хорошо.
Достаточно хорошо отвечал на вопросы, рекомендуется получше разобраться с экранированием для предотвращения XSS атак.
Разобраться с параметризацией SQL запросов. Разобраться с Cross Site Scripting. Разобраться c Missing Function Level Access Control. Разобраться с блокировкой сессии. Разобраться с CSRF/XSRF.
В целом есть проблемы с использованием и защитой от уязвимостей. SQL инъекцию написал, XSS - проблемы. Разобраться с авторизацией/аутентификацией
Со способами борьбы с sql injections в целом разобрался. XSS усвоен в ходе собеседования. Понятие о CSRF со второй попытки закрепилось. Понятие о фишинге имеется
Всё еще немного путается в причинах и в защите от XSS и CSRF
Injections - разобраться с параметризированными запросами и как выглядят/работают.
Получше посмотреть XSS.
CSRF - разобраться в сути уязвимости, как производится атака и какие есть варианты защиты.
Unvalidated Redirects and Forwards - не вспомнил суть уязвимости
Большинство уязвимостей и методов защиты от них было освещено. Рекомендуется уделить внимание CSRF с т.з. атакующего, а также phishing




T7	VCS
Рекомендуется уделить внимание rebase
Изучить как отменять текущие изменения в файле(-ах).
Разобраться с разницей применения merge и rebase: когда необходимо использовать первое, а когда второе, а также когда не стоит их использоваться.
неправильно рассказал про rebase, смутно объяснил преимущества git по сравнению с другими vcs, но в целом ок
Запамятовал про merge --squash. Что делать в случае Rebase ветки, над которой работает много разработчиков.
Хорошо бы разобраться с практическим использования git rebase и случаев, когда помогает решать конфликты историй у разных разработчиков (когда кто-то сделал git push --force в рабочую ветку нескольких человек)
немного напутал как git push работает с ветками, но в целом хорошо
Разобраться лучше с моделями ветвления.
Рекомендуется изучить модель ветвления gitflow
Разобраться зачем нужен локальный репозиторий
Разбраться лучше с преимуществами использования локальных репозиториев.
.gitkeep, git stash COMMANDs
Разобраться с отличием merge от rebase.
Разобраться в режимах слияния.
Разобраться с git reset --soft, разобраться лучше с отличиями стратегий слияния merge.
отличия merge/pull, rebase
Посмотреть как делать git fetch + git merge. Разобраться с конфликтами в файлах при слиянии, а также как физически конфликт отражается в содержимом файла и как его решить без дополнительных инструментов. Очень сыровато в работе с командой "rebase".
Посмотреть использование "git checkout" для файлов. Также тщательнее разобраться с наиболее распространенными моделями ветвления.
в целом ок, не смог полноценно сравнить git с централизованными vcs типа svn, не читал про вторые
Разобраться с типами VCS, разобраться с режимами работы git merge.
Разобраться, что делает команда git fetch и отличие от git pull. Также посмотреть режимы работы merge и в каких ситуациях они применяются.
Подробнее посмотреть merge и rebase, git shortlog
Было нексколько комманд, в которых путалась и плохо знала. но они реально мало используемые. Знания на достаточном уровне чтобы пользоваться гитом и решать задачи с ним в 95 процетов случаев.
Хорошо. Понимание есть. Я бы порекомендовал побольше поработать с git через консоль, выполняя различные операции по изменению истории (merge, rebase, cherry-pick) и разрешению конфликтов.
Почитать про rebase
Хороший уровень знаний и понимания. Рекомендую почитать про cherry-pick и подробнее изучить git-flow в части мержа различных веток.
Достаточно хорошо понимает устройство GIT, рекомендуется обратить внимание на операцию CherryPick. Так же рассказал в общих чертах про GIT-Flow.
Пробелы в понимании разницы между pull и fetch. Рекомендуется почитать про bisect.
Хорошо отвечал, забыл несколько команд, но не критично.
Хороший уровень. Подробнее почитать про локальное хранение веток и коммитов.
Не сказал что локальный репозиторий хранит все ветки проекта. Сравнительный анализ с SVN был поверхностным
Понадобились уточняющие вопросы при обсуждении различий между merge и rebase.
Практически на все вопросы получены ответы, единственное не могла назвать команду создания нового git репозитория.
Пробелы в знаниях о git-flow, stash.
не ответил что такое git stash GIT – Почитать про gitflow, научиться работать с git через консоль.