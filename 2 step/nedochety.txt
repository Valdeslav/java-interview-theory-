A1	Консольные приложения
+ 	Разобраться с 1) файлами con и nul 2) использованием скобок {}, (), <> в help
+ 	Разобраться с использованием помощи в консольных приложениях, способами перенаправления ввода-вывода.
	Узнать как посмотреть информацию о конкретной команде. Изучить разницу между встроенными командами и консольными приложениями. Изучить работу операторов >, >>, <.
	Использование и преимущества - хорошо. Но воспринимает наоборот понятия консольное приложение и интерпретатор (эмулятор) командной строки. Стоит разобраться в этом моменте.
	Не ответила на вопрос что такое CMD и bash
	Стоит попрактиковаться с перенаправлением конкретных потоков, () vs []
	Посмотреть синтаксис перенаправления вывода с указанием потока.
	не понимает смысл зачем нужны консольные апп, перенаправление ввода/вывода и т.п. потребовалось много уточняющих вопросов
	Разобраться с работой со стандартными потоками ввода-вывода, а также с перенаправлением в другие консольные приложения
+	Посмотреть зануление потока в CMD
	Разобраться с параметрами в HELP
	Нужно разбираться как работают потоки ввода\вывода, зачем вообще нужны консольные приложения, как работают символы скобок ()[]{} и тд.
	Разобраться, что такое "поток ввода" и как им пользоваться.
	Разобраться почему называется "поток" ввода и вывода данных.
	Небольшая путаница с синтаксисом перенаправления отдельных потоков
	Разобраться что же подразумевается под "автоматизацией рутинных задач" и почему консольные приложения в этом лучше графических
	Разобраться с синтаксисом перенаправления потоков ввода/вывода и синтаксисом описания команд.
	Разобраться как используются потоки ввода-вывода, как перенаправляются данные из одного приложения в другое, условными обозначениями в help.
	Разобраться с конвейером, вызовом help в приложении 
	Разобраться с параметрами консольных приложений. 
	Лучше разобраться с типами параметров консольных приложений
	Точнее разобраться с типами параметров 
	Есть общее понимание почему консольные приложения до сих пор существуют и какие преимущества перед приложениями с графическим интерфейсом, рекомендуется попрактиковаться в использовании их, написании пакетных файлов.
	примеры-ок, основная теория ок, заминка с получением списка доступных команд консольных приложений, почитать про формат описания параметров (http://docopt.org/)
	Разобраться с форматом параметров консольных команд, выводимых через help
	Назначение и место консольных приложений в мире приложений представляет не достаточно хорошо. Также нужно разобрать порядок взаимодействия с консольными приложениями
	Было сказано про такое преимущество как "автоматизация", но так и не удалось объяснить в чем заключается эта автоматизация и почему через простые графические приложения этого сделать нельзя.
	Разобраться со стандартными потоками ввода-вывода
	в целом ок, упустил главный момент что консольные апп дают возможность использовать себя в скриптах для автоматизации (рутинных) действий. остальные преимущества не так важны.
	Не знает: 1) использование консольных приложений в пакетных файлах. 2) О перенаправлении ввода-вывода из приложения в приложение. 3) О потоке ошибок. Плохо знает стандарт описания параметров консольных приложений.
	Знает о потоках ввода-вывода и возможности их перенаправления, но только теоретически. Практически не знает как их перенаправлять и/или разделять. Не понимает возможность организовывать конвейер приложения как поочередный запуск программ, а не направление на вход уже работающей программы.


A3	Web Services, RESTful
Смазано получилось про сравнение rest и soap в плане производительности, безопасности
Доразбираться с организацией безопасность в SOAP и REST и их сравнение
не назвал важную особенность ws: интеорперабельность, и поэтому не смог назвать отличия ws от rmi/ejb и т.п.
немного напутал с практическим примером визитора, но в целом хорошо
Разобраться лучше с принципами формирования урлов для REST-сервисов, разобраться лучше с преимуществами SOAP перед REST.
Маловато информации о преимуществах SOAP, в остальном нормально
На каких протоколах прикладного уровня может быть построен SOAP
Разобраться что такое web service, разобраться лучше с RESTful.
Не знает структуры SOAP сообщения, с практикой по REST плохо, query params плохо
Разобраться с построением URL к ресурсам для RESTful сервисов. Различия в использование put и patch для обновления ресурса.
SOAP Fault, UDDI, преимущества SOAP, запутался с идемпотентностью PUT/PATCH
RESTful- метод добавления сущности (post) не является идемпотентным, т.к повторный вызов того же метода приведет к другим результатам.
Проблемы с примерами RESTful, PUT/PATCH
Разобраться лучше с понятием идемпотентности и какие HTTP-методы являются таковыми.
небольшое затруднение примере использования soap\rest. В основном все ответил
Разобраться с рекомендациями по принципам формирования API в REST-сервисе 
Теоретически хорошо понимает назначение архитектур и сферу применения, однако следует изучить принципы построения restful приложений с т.зр. практической составляющей: как группировать, какие методы для каких целей выбирать и пр.
Есть пробелы по сравнению SOAP и REST
Хороший уровень знаний. Были небольшие ошибки при написании SOAP Message.
вопрос подробно освещен. небольшая заминка с передачей параметров функции в xml
1) Плохо понимает чем web-service отличается от других ресурсов 2) Не разобрался с SOA 3) Не разобрался с хранением состояния в SOAP 3) Разобраться с принципами построения URL в REST
Разобраться лучше в чем отличие между веб-сервисом и веб-сайтом, что такое SOA.
Тема раскрыта в полной мере. Снимаю бал за то что запутался в назначении элемента portType в WSDL
Лучше поразбираться с принципами построения параметров запросов
Подробнее разобраться с преимуществами/недостатками
Путанное объяснение возможностей использования WSDL и разницы в объемах передаваемых сообщений между REST и SOAP.
RESTful - практически нет знаний. Нужно заново изучать вопрос. Не смогла написать GET запрос с параметрами. Хотя, вопрос по HTTP протоколу сдан. SOAP - вроде назвала основные моменты. Глубоко не спрашивали.
соап-ок, встряли на примере rest сервиса, причём на передаче параметров в GET запросе. Так же надо стоит посмотреть существующие практики построения урлов, например для экспериментов https://petstore.swagger.io/#/
Разобраться с хранением состояния в SOAP сервисах.
Разобраться, что означает отсутствие состояния.
Хороший уровень. Небольшие проблемы с выбором между SOAP и REST в практическом примере веб-сервиса вычисления среднего арифметического для набора чисел.
Достаточно полно рассказал зачем и почему были придуманы WEB сервисы, подробно рассказал про SOAP, плюсы и минусы его использования, про REST рассказал основные моменты, были сложности с пониманием того, что значит требование "отсутствие состояния", с большим трудом разобрались в каком случае следует использовать PATCH запрос вместо PUT.
подсказки по недостаткам SOAP, с примерами использования. UDDI не упомянуто, по REST ответ дан верно по параметрам но в силу недостатка практики нет уверенности
Разобраться с определением веб-сервисом и чем они отличаются от других приложений, доступных через интернет.
пример вебсервиса с подсказкой, UDDI, подсказка с доп. параметрами rest для get, смысл restfull в тоже время есть понятия о преим/недост каждого, идемпотентность, кэшировании
Не далось определение Веб-сервиса и чем он отличается от других ресурсов, доступных по сети. Посмотреть какой REST-сервис может называться как RESTful.
Вэбсервисы описаны, сравнительный анализ произведен. Не пояснила что означает идемпотентность запросов и что значит принцип единого интерфейса в rest;
Небольшая заминка при обсуждении практического примера веб-сервиса калькулятора


O2	Основные паттерны ООП
Разобраться с паттерном "Цепочка обязанностей".
Разобраться с отличием адаптера и моста, фасада и прокси, что такое цепочка обязанностей , стратегия.
В целом нормально, но был не самый хороший пример Компоновщика
небольшая заминка с недостатками синглтона, по остальному отвечал очень хорошо
фабричный метод- нет понимания почему использовать именно его строитель - аналогично синглтон - нет понимания как устроен прокси-фасад-ок наблюдатель - ок наблюдатель и цепочка обязанностей - нечеткое понимание различий 
Разобраться с фабричным методом, билдером, singleton. Поверхностное понимание chain of responsibility
Разобраться в паттернах "Декоратор" и "Прокси", а также в разнице между ними.
Разобраться лучше с паттерном Iterator.
Разобраться с примерами применения цепочки обязанностей и чуть лучше разобраться с билдером и фабричным методом
Лучше понять чем различаются Facade и Proxy, фабричный метод и builder. Плохо ориентируется в практическом применении.
Рассказал про все паттерны, о которых был разговор, детально рассказал про реализацию Синглтона и Композита
Разобраться с шаблоном Builder: так и не смог сформулировать его суть, а также преимущества использования. Разобраться с шаблоном Заместитель(Proxy) и его отличия от Декоратора.
Запутался с паттерном Строитель, не рассказал как и какую задачу он решает. Были сложности с шаблонами Заместитель и Декоратор, с отличиями между ними. Так же были затруднения с шаблоном Стратегия, рассказал как его реализовать и его суть, но не очень чётко понимает основную выгоду его применения.
Шаблоны названы, описано их назначение. Для singleton описала несколько способов реализации. Однако по описанию задачи не смогла выбрать необходимый шаблон, реализующий требования.
Небольшая заминка при обсуждении практического примера по выбору подходящего паттерна (подошли бы "Команда" и "Стратегия"). В остальном: видно понимание сути; было названо много разновидностей паттернов, выходящих за пределы GoF.


J5	Общие понятия о многопоточном исполнении кода
Разобраться почему часть методов синхронизации между потоками в классе Thread и часть в Object. Посмотреть перегруженные конструкторы класса Semaphore.
Разобраться лучше с потоковым голоданием.
Разобраться с ключевым словом volatile и классом ThreadLocal.
ConcurrentHashMap совсем поверхностно расскрыт, в остальном всё хорошо.
Разобраться как происходит синхронизация потоков с использованием ключевого слова synchronized, разобраться что такое deadlock
Не правильно понимал суть "взаимной блокировки" потоков. Остальное нормально.
Разобраться с состояниями потоков и жизненным циклом потока (переход между какими состояниями возможен), разобраться могут ли примитивные типы быть объектами синхронизации, что является объектом синхронизации в случае применения synchronized к методу класса, лучше разобраться с гонкой ресурсов.
Посмотреть еще раз жизненный цикл Thread и его состояния. Разобраться со конструкцией synchronized и что именно она блокирует. Также разобраться с synchronized блоком по объекту.


J9	Аннотации и их виды
не знает смысл Source, не смог объяснить зачем нужен @Override, по сути не знает смысл/назначение аннотаций
Разобраться с назначением аннотаций (это не еще одно место, где для класса можно указывать поля и значения) Разобраться со значениями RetentionPolicy и использованием каждого из них.
Разобраться как заставить работать собственные кастомные аннотации.
Разобраться как реализовывать поведение собственных аннотаций.
Разобраться в каких случаях возможно указывать в скобках аннотации значение без названия аттрибута.
Разобраться с javadoc
разобраться с @Override
Разобраться с назначением @Retention CLASS 


J10	Stream API
Разобраться в преимуществах Stream, разобраться с flatmap
Разобраться лучше с flatMap.
Посмотреть интерфейс Collector, а также что необходимо для написания своей реализации коллектора. Optional - разобраться в преимуществах использования этого типа над обычными данными, кроме как прятания проверок на null под соответсвующие методы.
Разобраться с тем что такое поток
напутал с map, не все правильно ответил по практическому примеру, не рассказал смысл collect в общем виде
Пробелы в знаниях функциональных интерфейсов сказываются на знаниях в stream-api. Чуть запутался в map vs peek. Нужно почитать о переиспользовании стримов. Изучить рекомендации по использованию параллельних стримов.
Разобраться с переиспользованием одного объекта Stream для различного набора операций(разветвление). По-прежнему пробелы в фунциональных интерфейсах (которые встроенные), вследствие чего проблемы с определением типов принимаемых аргументов у конвейерных методов "стримов". Разобраться в предназначении типа Optional и его использования: *Oн не для того, чтобы прятать явную проверку на null под методами `ifPresent()` или `orElseGet()`. Посмотреть особенности использования параллельных "стримов", а также их применимость для различных операций(а также для различных источников данных).
Посмотреть интерфейс Collector и какие необходимо передавать аргументы, чтобы создавать собственный коллектор. Разобраться с типом Optional и для чего он нужен (это не просто спрятать неявную проверку на NPE под методом)
Разобраться лучше зачем нужны стримы и почему механизм работы со стримами организован именно так.
Разобраться с назначением функционального интерфейса, смыслом преобразования различных объектов в Stream, отложенного выполнения.
Разобраться лучше с базовыми операциями над стримами.
В самом начале перечисления способов создания и промежуточных методов как будто зачитывал статью https://habr.com/ru/company/luxoft/blog/270383/. Очень трудно и долго решил простую задачу на 3 цепочечных вызова метода. Плохо ориентируется в типах функциональных интерфейсов, которые принимают методы объекта Stream. Разобраться с преимуществом использования Optional вместо явного сравнения на null.
Разобраться лучше в чем преимущество Optional, почитать про Collectors.partitioningBy
Stream API - хорошо Разобраться с сутью и предназначением класса Optional. Помимо прятания NPE, еще достигается null-safety при операциях преобразования: методы .map() и .filter()
Методы Stream API - Хорошо. Коллекторы и создание собственного коллектора - хорошо. Однако стоит посмотреть на более сложные встроенное коллекторы такие как "groupingBy", "partitioningBy", "joining" и др. Также посмотреть использование Optional типа кроме как "отсутствие проверок" и "защита от NPE"


J11	Потоки данных
Возникала путаница в потоках ввода VS вывода
Разобраться лучше с DataInputStream и DataOutputStream.
Разобраться лучше с отличиями DataInputStream/DataOutputStream и Reader/Writer.
Разобраться лучше с кастомной сериализацией/десериализацией.
Разобраться лучше с FilterInputStream и FilterOutputStream, разобраться с кастомизацией сериализации и десериализации объектов через ObjectInputStream и ObjectOutputStream.
FilterInputStream, FilterOutputStream - разобраться с этими классами-обертками над другими потоками, а также что от них наследуется.
Разобраться с буферизацией ввода-вывода, как написать собственную сериализацию
Разобраться с кастомизацией сериализации/десериализации объектов с помощью readObject/writeObject, зачем нужна буферизация потоков данных
Хороший уровень, нет замечаний по ответу. Можно почитать про блокирующий и неблокирующий ввод-вывод, но это больше к другому вопросу относится.
Прошлые пробелы почитал и попытался устранить, но всё равно не до конца разобрался в некоторых реализациях или их предназначении.
Разобраться, зачем потоки вкладывают друг в друга, разобраться с FilterInputStream и зачем нужно разделение на символьные и байтовые, если есть DataInputStream/DataOutputStream.
Изучить подклассы от InputStream/OutputStream и Reader/Writer и их назначение. Посмотреть назначение и использовать FilterInputStream. Разобраться с разницей между байтовыми и символьными потоками в практическом использовании. Закрытие потоков и сериализация объектов - нормально.
Не понимает чем поток отличается поток от других последовательных типов данных. Не знает реализации механизма сериализации, не понимает как кастомизировать сериализацию потока. Сложности с пониманием закрытия потоков.
Разобраться как реализовать сериализацию/десериализацию объектов в произвольный формат, лучше разобраться как работают буферезированные потоки.
 Разобраться как сериализовать/десериализовать объект с полем несериализуемого типа без потери данных из этого поля


J12	Сборка проектов (один из)
Разобраться со scope, настройками в settings.xml 
Разобраться: - назначение секции dependencyManagement - scope=provided - имеющимися настройками в settings.xml
Типы репозиториев (Gradle)
Разобраться как указать зависимость одного таска от другого и таск по умолчанию в Gradle, разобраться лучше с фазами сборки в Gradle, разобраться лучше какие типы репозиториев есть в Gradle.
Разобраться как работать с профилями, как разрешать конфликты зависимостей, разобраться лучше со скоупами зависимостей.
Разобраться с сами процессом "сборки" Java-приложений. Что именно здесь "упрощает" использование Maven. Разобраться с фазами сборки. А также что именно происходит на каждой фазе. Связь между работой плагинов и фазой сборки. Изучить тему "профили в Maven". Разобраться с использованием и настройкой локальных и удаленных репозиториев.
Разобраться с dependecy management.
Нет понимания как работает dependencyManagement и что такое scope=provided
Немного запутался в фазах maven
Разобраться как таски по умолчанию конфигурить.
Какой командой собрать приложение без unit-тестов.


J15	Поддержка версионирования БД (один из)
Разобраться лучше с таблицей DATABASECHANGELOGLOCK, разобраться лучше с context.
Больше попрактиковаться с практическим использованием различных возможностей Liquibase.
Поверхностные знания, не использует термины иструмента. Не смог однозначно перечислить преимущества и назначение версионирования.
Разобраться лучше с преимуществами использования Liquibase.
Разобраться с таблицами DATABASECHANGELOG и DATABASECHANGELOGLOCK, разобраться с тэгом include, атрибутом runOnChange и preconditions.
Разобраться с <preConditions>
Пробел в знаниях по таблице databasechangeloglock, атрибуту runAlways. В остальном - хороший уровень.
Разобраться лучше, что содержат технические таблицы Liquibase в базе данных.
Не назвал самую значимую отличительную черту liquibase -поддержка разных диалектов. Необходимо почитать "лучшие практики" по liquibase.


B2	Объекты БД
Получше посмотреть триггеры. Разница между FOR EACH STATEMENT и FOR EACH ROW, переменные OLD и NEW. А также возможность использовать ранее перечисленного в BEFORE и AFTER
Разобраться с IN/OUT параметрами хранимых процедур.
Лучше разораться с преимуществами и назначением объекта View, назначением и минусом триггеров. Разобраться с соотнесенными подзапросами и использованием функций EXIST, ALL, SOME, ANY с ними.
поверхностные знания, общее представление об обектах не проведен анализ view VS materialized view VS select грубо озвучены плюсы и минусы использования триггеров
получилось все сильно привязано к postgresql, нужен более общий охват. по триггерам почитать получше про new, old и зачем оно надо
Разобраться с назначением схемы БД, назначением и работой View, типами и работой, преимуществами и недостатками триггеров, последовательностей (sequence), назначением прав пользователям 
почитать - преимущества и недостатки триггеров, sequence, команды изменения ролей
Разобраться с назначением схемы.
Разобраться лучше с преимуществами использования View, для чего нужна schema.
Разобраться с: ограничением доступа данных и производительностью View, назначением схем, поддержание ссылочной целостности при помощи хранимых процедур,
Разобраться что такое schema, sequence, что такое constraint и какие они бывают.
Почитать об ограничениях допускаемых действий внутри триггеров. Посмотреть объекты schema и sequence.
Были некоторые сложности с синтаксисом создания/изменения объектов БД, рекомендуется повторить. Рассказал про хранимые процедуры и функции, были сложности с тем, где какие операции доступны. Про триггеры в целом рассказал всё. Есть некоторое непонимание преимуществ и недостатков процедур и триггеров. Имеет общее представление о разграничении прав доступа, но рекомендуется ознакомиться немного более детально со всем спектром возможностей настройки разрешений.
Лучше разобраться с: тем что такое объект "База данных", "Схема", "View", режимы работы внешнего ключа, назначением хранимых процедур, выходными параметрами различием процедур и функций, sequences. Читать стандарты, а не только материалы по postgresql
Разобраться с: 1) constraints 2) схемой 3) производительность view 4) sequence 5) как создаются и хранятся индексы, структура индексов 6) недостатками и преимуществами тригеров 7) параметрами хранимых процедур 8) назначением хранимых процедур
Разобраться лучше зачем нужна схема, разобраться с constraint для первичного и внешнего ключей, разобраться зачем используется sequence, разобраться какие типы параметров бывают у хранимой процедуры и как возвращать данные из ХП.
VIEW - разобраться как работает: хранит ли значения указанного запроса или всегда обращаться по указанному запросу. Узнать о MATERIALIZED VIEW и его отличии. TRIGGER - не знает о таблицах inserted updated. Разобраться в ограничении на операции внутри тела триггера.
Изучить темы: - Shcema https://docs.microsoft.com/ru-ru/dotnet/framework/data/adonet/sql/ownership-and-user-schema-separation-in-sql-server - Use the inserted and deleted Tables in Trggers https://docs.microsoft.com/ru-ru/sql/relational-databases/triggers/use-the-inserted-and-deleted-tables - Collation (параметры сортировки)https://docs.microsoft.com/ru-ru/sql/relational-databases/collations/collation-and-unicode-support
Разобраться с назначением схем. Глубже разобраться с режимом работы FK. Разобраться с причиной использования SEQUENCE. Разобраться как хранимая процедура возвращает результат в виде таблицы.
Разобраться для чего нужна схема, в каких случаях работает foreign key, какие преимущества даёт использование sequence, разобраться что может возвращать хранимая процедура
Разобраться что такое схема, разобраться лучше как работают ограничения первичного и внешнего ключа, разобраться какие преимущества и в каких случаях дает использование View, для чего нужны последовательности.
Не был назван ключевой минус триггеров - неявность их задействования. В остальном - хорошо.
truncate vs drop
Разобраться с объектом "База данных", лучше разобраться со схемой, с назначением View, 
разобраться какие преимущества дает использование view и sequence, чем отличается function от procedure
Не знает что такое схема в БД. Путается в понимании View. Не знает использование View для ограничения доступа к таблице. Недопонимает назначение хранимых процедур, не знает виды параметров хранимой процедуры, как вернуть данные из хранимой процедуры. Плохо понимает как отрабатывает триггер и какие параметры он использует. Не знает для чего роли.
Не смог объяснить как из ХП вернуть данные и почему ХП производительнее. Не знает разницу между before и after триггерами. Не знает что такое роль, на что можно давать гранты, а на что - нет


B4	Продвинутый SQL
Разобраться лучше в каких частях запроса можно использовать подзапрос.
Разобраться с 1) подзапросами в перечне полей, EXISTS, 2) Разобраться с соотношением перечня полей в select с перечнем в group by 3) Разобраться с обобщенным табличным выражением
плохо с подзапросами, почитать какие поля можно выбирать в select/group by, почитать про рекурсию
были вопросы к аналитическим запросам, агрегирующим
Лучше разобраться соотнесенными подзапросами.
Попрактиковаться с рекурсивными запросами, чтобы уметь их писать
Разобраться с коррелирующими и некоррелирующими подзапросами.
Разобраться лучше с order by в union.
Разобраться с Exists, использованием подзапроса во from и join, с формированием результата запроса, с принципами объединения в UNION и использованием order by в нем, разобраться с аналитическими функциями практически
Разобраться с exists c подзапросами и как использовать подзапросы в from и join, разобраться лучше с having, разобраться с использованием order by в union, разобраться лучше с аналитическими функциями.
По началу долго плавала с подзапросом. Лучше разобраться с (ALL, IN, ANY)
Разобраться с подзапросами и с выводом констант в select-листе, разобраться лучше с group by, разобраться лучше с синтаксисом оконных функций.
Разобраться с коррелирующими подзапросами и их использованием в перечне полей SELECT, разобраться с соотнесение group by с перечнем полей в SELECT, выводом констант в SELECT
Требуется больше уделить внимание практике написания подзапросов, использования функций и обобщённых табличных выражений.
Пробел в знаниях по использованию OVER. Рекомендуется подробнее разобраться с синтаксисом рекурсивных запросов.
Теоретически ответила хорошо. Правда запрос с рекурсией не смога написать. но как для JavaScript-разработчика - хорошо.
Разобраться с тем как работает "order by", обратить внимание на использованием с UNION.
Затыки с алиасами. не знает EXISTS, лучше понять как работает group by, проблемы константами, разобраться с union all, поразбираться ROWS or RANGE в аналитических ф-циях
разобраться как работает условие exists, разобраться как работает group by, какая разница между union и union all
Пробелы в знаниях синтаксиса рекурсивных запросов и аналитических функций


W6	Основы JavaScript
Стрелочные функции.
Подробнее изучить области видимости.
Туманное представление об области видимости и влиянии на него объявления переменных и функций. Тема это, конечно, непростая, но в W6 все таки входит. Так то да, термин Владимир не в первый раз услышал, но не смог привести корректный пример использования этой концепции. И с остальным. Нормальной практики по JS наверное не было. 
Вспомнить как переводить числа в двоичную систему и обратно. Разобраться как работают булевые операторы(&& и ||) в JavaScript. Разобраться с использованием функций, как значений, которые можно сохранять в переменные и передавать в другие функции/методы. DOM: разобраться с разделением свойств по навигации через узлы и через элементы. Получше разобраться с методами поиска элементов в DOM и что они возвращают(HTMLCollection/NodeList).
Разобраться с поиском по DOM не по всему документу, а только внутри конкретного узла.
Разобраться с навигацией по DOM через узлы и через элементы (на примере `firstChild` и `firstElementChild`). Разобраться какие методы поиска элементов можно вызывать только у `document`, а какие у любого элемента.
Посмотреть свойства/метода Location, как отличить массив/объект
из мелких нюансов - заминка с примером(область видимости хотя теория ок),location.href подсказали
Разобраться лучше с объявлением/использованием функций, разобраться лучше с удалением обработчиков событий.
Разобраться с "глобальными" переменными, объявлением и вызовом функций. Разобраться с принципами добавления и удаления событий через addEventListener/removeEventListener
Разобраться с преобразованием типов данных при сравнениях ,разобраться лучше с битовыми операторами и представлением чисел в двоичной системе счисления, разобраться со всплытием переменных, разобраться лучше с BOM, разобраться лучше с отличиями разных способов назначения обработчиков событий.
бъявление переменных -, приведение типов -, побитовые операторы с большего вспомнил, но не смог применить даже & и |, BOM -, обработка событий в общих чертах
Разобраться лучше с унарным плюсом, => и преобразованием типов данных, разобраться лучше с объявлением переменных и областью видимости, а также с объявлением функций, разобраться лучше с addEventListener.
Разобраться с: операторами: +, ==, =>, областью видимости var, объявление, область видимости, вызов функций, лучше изучить функции поиска элементов в DOM
Лучше разобраться с объявлением и вплытием функций, что такое узел DOM
проблемы со всплытием и замыканием посмотреть объект event и назначение обработчиков
Разобраться с "глобальными" переменными, областью видимости и параметрами функций, add/remove event listener
Есть непонимание глобальных переменных; разницы в объявлении переменной через var и let, а так же объявления функции через var и function; вызов функции с разным количеством параметров.
Разобраться с delete, областью видимости var, вызовом именованной функции, параметрами функции, выполнением скрипта при загрузке страницы, разобраться с добавлением/удалением обработчиков событий 
Проблемы с описанием функций. Не понимает как происходит всплытие и как определять область видимости. Работа с событиями также вызвала очень большие сложности. Необходимо больше попрактиковаться и подучить.
Разобраться лучше с отличием null и undefined.
Разобраться с битовыми операторами !! ^ >>>, && с объектом, объявление без var, область видимости функций, вызов функций с разным количеством параметров. прояснить состав объектов BOM. Разобраться с составом функций поиска элементов в DOM. 
Рекомендуется глубже ознакомиться с битовыми операциями; с использованием && и || с объектами; с понятием глобальной области видимости, тонкостями использования var/let/const; с вызовом функций и ключевым словом arguments; с составом BOM; с вариантами поиска элементов через DOM.
Разобраться с оператором запятая, разобраться лучше со всплытием переменных.
Проблемы с хойстингом var, приведением типов при сравнение объектов с примитивами. Есть пробелы по навигации DOM. Для не JS-ника нормально
Разобраться с объявлением и областью видимости функций.
Разобраться с null, undefined,%, битовыми операциями, ^ ~, принадлежностью "глобальных переменных", с отличием var от let, областями видимости переменных в т.ч. объявленных в функциях. Разобраться с манипуляций элементов через DOM, отписка от событий.
Есть непонимание разницы между null и undefined. Сложности с битовыми операциями. Нужно разобраться с областями видимости, разницей между let и var, не очень знаком с объектом window, нет чёткого понимания, что такое BOM. Рекомендуется детальнее ознакомиться с интерфейсами DOМ, какие возможности предоставляются.
Поразбираться с областями области видимости переменных, как обрабатываются параметры при выхове функций.
Доразбираться с объявлением глобальных переменных и их областью видимости. Разобраться с обращением к необъявленным переменным. Разобраться с обработкой параметров функций.
С битовыми операциями разобрался. Назначение обработчиков событий - нормально. С поиском по DOM частично разобрался, но не смог назвать часть методов для поиска элементов. Также пробел в навигации по DOM как по дереву узлов(родительский элементы, родственные и дочерние). 
По большей части вопросов нет. Необходимо уделить внимание всем типам данных, системам исчисления (двоичная), навигации по DOM, назначению обработчиков событий в части addEventListener
Не понимает & &&, не понимает преобразование типов. Объявление переменных знание очень неполное, фрагментарное. Области видимости практически не знает. BOM практически не знает только navigator. Разобраться с парсингом HTML страницы.
Некоторые затыки с преобразованием типов, объявлением и вызовом функций. 
Надо подробнее почитать приведение типов и работу логических операторов, в остальном нормально.
Прочитать про оператор "," Разобраться с назначением битовых операций и их отличием от логических. Затруднение с решением практических примеров на "Объявление и использование переменных/функций. Область видимости". Проблемы с навигацией по дочерним, соседним элементам.
Разобраться с оператором присваивания и оператором запятая, почитать про стрелочные функции, чем отличается & и && при использовании в логических выражениях, разобраться с локальными и глобальными переменными
Разобраться с 1) массивами. 2) null 3) объявлением функций, областью видимости переменных в функциях
область видимости с подсказкой (поднятие переменных), подсказки по синтаксису обьявления функций
Не знает битовых операций, пробелы в понимании поиска по DOM, не знает элементов BOM, существенные пробелы в понимании назначения обработчиков событий
Разобраться с булевыми операциями, BOM, назначением обработчиков событий
Небольшие пробелы по определению типов значений. Пробелы в знаниях: 1. Работа битовых операторов 2. Поднятие переменных 3. Добавление обработчиков событий через свойства .on... = function
по теории из большего ок, рассмотрели много примеров, были нюансы по: побитовые операции, сдвиг, hoisting, innerHtml, добавление обработчиков событий
тернарный оператор не сразу, поднятие переменных внутри функции (var), location.href (текущий урл страницы), получение html-содержимого узла (innerHtml), в целом теория есть, практики очень мало 
Неправильно с областью видимости var, let, const. Не очень понимает `hoisting`. С DOM и события 
Трудности с операторами: % ** ~ сдвиговые операторы
Не знает про parseInt Не смог назначить обработчик onclick
Почитать как сравниваются null и undefined между собой; почитать как работают методы addEventListener и removeEventListener
Не знает битовых операций, не помнит всех типов узлов dom, не помнит как обращаться к bom, не точно понимает процесс парсинга страницы. 


T1	Командная оболочка CMD (Windows)
Поразбираться с SET и SETLOCAL, какие файлы являются запускаемыми
Разобраться с setlocal и как узнать дату-время и версию ОС в CMD.
Разобраться с start/cmd, переменными окружения, типами исполняемых файлов, лучше разобраться с xcopy, more, ipconfig
вначале существенная заминка с отличием cms/start/ и переменными окружения потом ок, почитать ipconfig
Назвали как выводить процессы, а как с ними работать - нет.
Замечание есть только по работе с процессами. Пока только на уровне знания имен комманд. Стоит разобраться как их использовать с различными аргументами и флагами.
 Разобраться с 1) dir 2)типам исполняемых файлов 3) просмотр файлов 4)удаление директориев 5)переменые окружения
Почитать more, find
детальнее посмотреть работу с файлами
Разобраться с типами выполняемых файлов, командами start, CMD, call, переменными среды. 
Разобраться с командами tracert и netstat. Разобраться как считать в пакетном файле параметры начиная с 10-го и дальше.
Стоит получше разобраться с пакетными файлами: работа с аргументами вызова, переменными окружения, вызовы других файлов.
Разобраться с: wildcard для DIR, выбор диска, уточнить работу call
Разобраться как фильтровать спиcок файлов в команде dir, как перейти на другой диск.
Разобраться с переходом по дискам. Разобраться с запускаемыми файлами типа COM, CMD, BAT. Команды start, CMD. Разобраться с set и изменением переменных окружения
type | more, пробелы по исполняемым файлам
Рекомендуется почитать про использование более 10 параметров в пакетных файлах, про выполнение одного пакетного файла из другого.
Разобраться как вывести содержимое текстового файла.
Пробелы: rename
Проблемы с taskkill, минимальные пробелы по работе с файлами (rename)
Требуется больше практики в написании пакетных файлов, использовании ветвлений в скрипте, переменных.
Разобраться с: more, SET vs SETLOCAL, CMD vs START 
Отличия между SET и SETLOCAL в пакетном файле и между Сmd и Start.
Разобраться с 1) переменными окружения - очень слабо 2) SET, SETLOCAL 3) Разобраться с DIR, START, CMD
Разобраться какое количество входных параметров может быть для bat-файла, разобраться с переменными окружения, как создать новый файл в cmd.
Разобраться как удалять директории в CMD Windows
Разобраться: команда NET переменные окружения (критично) с передачей более 9 параметров в пакетный файл, setlocal.
Хорошо. Можно еще разобраться с параметров /fi для tasklist и taskkill, а также посмотреть синтаксис сложных конструкций в .bat файлах
на назвал фильтры для выборки
Посмотреть, как получить информацию о сетевых интерфейсах и подключениях.
Разобраться с командами netstat и ipconfig.
Не знал xcopy, мелкие недочеты
Разобраться с CMD и START, SC, NET
Проблемы с процессами, CMD vs START, небольшие замечания по созданию файлов


W5	Продвинутый CSS
Разобраться с приоритетом подключаемых файлов, тега style, атрибута style Изучить правило position Вникнуть в суть БЕМ, поупражняться с формой, можно посмотреть css frameworks
Поразбираться с css calc()
Так то представление есть. Но не подкрепленное практикой, я считаю (например, функция css calc() - там вообще ничего не надо ведь выучивать, достаточно применить пару раз в приложении)
Ответы приходится вытягивать, но не без успеха, рекомендуется изучить методологии CSS, хотя бы БЕМ
Получше разобраться с методологией BEM: каким элементам и для чего нужно создавать блоки, а также как переиспользовать код, написанный через BEM
hsl посмотреть, em vs rem, селектор по нескольким классам, именование классов в БЭМ
Есть неточности по viewport и отдельным селекторам
Рекомендуется посмотреть селекторы атрибутов. также повторить псевдоклассы (что такое и какие есть назвала но путалась в их названиях). По методологиям все хорошо.
Есть пробелы по отдельным css свойствам для расширенной стилизации, лучше разобраться с преимуществами методологий и модификаторами ключ-значение в BEM
незначительная заминка заминка с заданием % в стилях, скрытие элемента, селектор следующего элемента (+) примеры ок.
Лучше разобраться с BEM (модификаторы, миксы), есть пробелы по позиционированию
Немного запутался в приоритетах правил css. Необходимо разобраться с потоками (float) и научиться использовать методологии CSS правильно
Частично путалась в селекторах, неуверенно по стилям
Посмотреть запись HSL для задания цвета. Разобраться с заданием псевдо-элементов. Поработать с методологией BEM на практике
Читать методологии. С БЭМ все плохо, посмотреть как задавать цвета, селекторы по атрибутам
Разобраться с МИКС в БЭМ
Разобраться что же такое "методология" и какие проблемы она решает. Поглубже изучить BEM с практической стороны.
Посмотреть hsla, vh, em/rem. Есть проблемы с практическим применением БЭМ.
Не было знаний доволе часто используемых величин измерения rem vh vw. Также отсутвие каких-то минимальных практических навыков по гейсфулл дегродейшн, хотя в теории есть понимание, а практически распознать или написать нет. Практике БЕМ также храмала. 
Забыл про альфа-канал в хекс-нотации.
Немного плавал синтаксис БЭМ, можно подробнее посмотреть преимущества использования методологий и задание цветов hsla
Значений стилей - хорошо. Похоже, что есть некоторое недопонимание контекстного селектора, как на примере двух классов - с пробелом и без. Также надолго залип с написание селекторов атрибута. Методогия BEM: рассказал о концепции блок-элемент-модификатор и о том, как именно это именовать. Но по решению предоставленного задания оказалось, что для него навешивание всех этих классов на элементы нужно для того.... чтобы на элементах были классы. Классы просто будут говорить о сути элемента. И чтобы потом в других местах можно было переиспользовать эти классы.
Проблемы: 1. Понимание шестнадцатеричной записи цветов. 2. Значения text-align 3. Расположение элементов с разными значениями position 4. Формирование имен классов по БЭМ в практическом примере с формой и её элементами. Выяснились и фундаментальные пробелы в понимании принципов БЭМ из-за недостатка опыта.
Необходимо уделить внимание особенностям управления цветом (HEX-форма), более внимательно ознакомиться с методологией БЕМ, закрепить приобретенные навыки практически
Небольшие пробелы по hsla, с селекторами в целом норм (проблема с применением :first-child). Упомянул порядком методологий, рассказал про amcss, но проблемы с БЭМ (миксы, модификаторы ключ-значение)
Уточнить, от чего отталкиваются значения `em` и `rem`. И побольше бы опыта работы с методологией (на примере BEM). 
Задание цветов - хорошо. Размеры - перечислил только часть, не понимает работу некоторых типов. Использует неправильный способ расчета специфичности: где-то почитал очень простой алгоритм, который не совсем правильный, но для тривиальных случаев работает. Свойством `position` не знает как пользоваться. Методологии поверхностно. Затронули на примере BEM, но в оформлении и именовании классов не очень разобрался.
В целом вопрос раскрыт, однако в сущности методологии БЭМ не хватает ключевых понятий и практики, также рекомендуется разобраться со способами позиционирования
Были небольшие неточности в ответах по CSS-свойствам и селекторам, а также небольшая ошибка в BEM-классах, но в целом очень хорошо.
Ошибки в приоритетах селекторов. В остальном хорошо. Были рассказаны подробности сразу нескольких методологий.
Рекомендуется больше практики, уделить внимание позиционированию, потокам
Очень поверхностно разобрался в БЭМ. Разобраться лучше в общей идее и методологии заложенной в БЭМ, принципах (Разделение кода на части, Принцип единственной ответственности, Принцип открытости/закрытости, DRY)
частично присутствовал, из того что слышал-в целом всё ок
глянуть сокрытие элемента display/visibility, :not(selector), :first-child/last-child в бэме с модификатором подсказка, в целом ок - селекторы рассказаны и показаны подробно
Разобраться со свойтвом `position`, единицами измерения em и rem 
Продемонстрированы навыки использования псевдоклассов/элементов, установки значений для правил, в т.ч. цвета, описаны принципы верстки по BEM. Вместе с тем необходимо уделить внимание на расчет специфичности правил, позиционирование, относительные величины em/rem
На все вопросы были получены развернутые ответы. Рекомендую почитать о других методологиях CSS, кроме БЭМ.
Проблемы с селекторами (атрибутов, группировка), нет понимания псевдо-элементов, есть нюансы по БЭМ, проблемы с em
Не знает: псевдоэлементы и псевдоклассы, комбинированные селекторы; значения свойства position. BEM: поверхностно только. Больше знает как именовать, но не как использовать и переиспользовать блоки и элементы.
Пробел в понимании RGB-кодирования цветов
